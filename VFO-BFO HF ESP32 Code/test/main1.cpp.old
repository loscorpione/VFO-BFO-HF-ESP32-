#include <Arduino.h>
#include <Wire.h>
#include <si5351.h>

// Configurazione encoder
#define ENC_CLK 34
#define ENC_DT  35
#define ENC_SW  32

// Configurazione I2C
#define I2C_SDA 21
#define I2C_SCL 22

// Variabili encoder
int encoderPos = 0;
int lastEncoded = 0;

// Variabili frequenza
unsigned long frequency = 7100000; // 7.1 MHz
unsigned long step = 1000;         // 1 kHz step
unsigned long minFreq = 1000000;   // 1 MHz
unsigned long maxFreq = 30000000;  // 30 MHz

// variabili per gestione pulsanti
bool buttonPressed = false;

// Oggetto SI5351
Si5351 si5351;

// Variabili per debounce
unsigned long lastEncoderRead = 0;
const int encoderReadInterval = 10; // ms
unsigned long lastButtonPress = 0;
const int buttonDebounce = 200;     // ms

// Prototipi funzioni
void readEncoder();
void updateFrequency();
void changeStep();

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("SI5351 VFO Controller - ESP32-S3");
  Serial.println("=================================");
  Serial.print("SDA: GPIO ");
  Serial.println(I2C_SDA);
  Serial.print("SCL: GPIO ");
  Serial.println(I2C_SCL);

  // Configurazione encoder
  pinMode(ENC_CLK, INPUT_PULLUP);
  pinMode(ENC_DT, INPUT_PULLUP);
  pinMode(ENC_SW, INPUT_PULLUP);
  
  // Lettura stato iniziale encoder
  lastEncoded = (digitalRead(ENC_DT) << 1) | digitalRead(ENC_CLK);

  // Inizializzazione I2C
  Wire.begin(I2C_SDA, I2C_SCL);
  delay(100);

  // Inizializzazione SI5351
  Serial.println("Initializing SI5351...");
  if (si5351.init(SI5351_CRYSTAL_LOAD_8PF, 0, 0) == false) {
    Serial.println("ERROR: SI5351 not found!");
    Serial.println("Check I2C connections:");
    Serial.println("- SDA to GPIO 21");
    Serial.println("- SCL to GPIO 22");
    Serial.println("- GND connected");
    Serial.println("- 3.3V/5V power");
    while(1) {
      delay(1000);
      Serial.print(".");
    }
  }
  
  Serial.println("SI5351 found and initialized");

  // Configurazione SI5351
  si5351.set_pll(SI5351_PLL_FIXED, SI5351_PLLA);
  si5351.drive_strength(SI5351_CLK0, SI5351_DRIVE_8MA);
  si5351.output_enable(SI5351_CLK0, 1);
  
  // Imposta frequenza iniziale
  si5351.set_freq(frequency * 100ULL, SI5351_CLK0);
  
  Serial.println("Setup completed");
  Serial.print("Initial frequency: ");
  Serial.print(frequency / 1000000.0, 4);
  Serial.println(" MHz");
  Serial.print("Step: ");
  Serial.print(step);
  Serial.println(" Hz");
  Serial.println("Rotate encoder to change frequency");
  Serial.println("Press button to change step size");
}

void loop() {
  // Lettura encoder
  readEncoder();

  // Cambio step con pulsante
  if (digitalRead(ENC_SW) == LOW) {
    if (digitalRead(ENC_SW) == LOW && !buttonPressed) {
    if (millis() - lastButtonPress > buttonDebounce) {
      buttonPressed = true;
      changeStep();
      lastButtonPress = millis();
    }
  }
    // Attende rilascio pulsante
    if (digitalRead(ENC_SW) == HIGH && buttonPressed) {
    buttonPressed = false;
  }
  }
}

void readEncoder() {
  int MSB = digitalRead(ENC_CLK);
  int LSB = digitalRead(ENC_DT);

  int encoded = (MSB << 1) | LSB;
  int sum = (lastEncoded << 2) | encoded;

  if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) {
    frequency += step;
    if (frequency > maxFreq) frequency = maxFreq;
    updateFrequency();
  }
  else if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) {
    frequency -= step;
    if (frequency < minFreq) frequency = minFreq;
    updateFrequency();
  }

  lastEncoded = encoded;
  delayMicroseconds(100); // Piccolo delay per stabilita'
}

void updateFrequency() {
  // Aggiorna SI5351
  si5351.set_freq(frequency * 100ULL, SI5351_CLK0);
  
  // Debug su seriale
  Serial.print("Frequency: ");
  Serial.print(frequency / 1000000.0, 4);
  Serial.print(" MHz (Step: ");
  Serial.print(step);
  Serial.println(" Hz)");
}

void changeStep() {
  switch(step) {
    case 1000: 
      step = 10000;   // 10 kHz
      break;
    case 10000: 
      step = 100000;  // 100 kHz
      break;
    case 100000: 
      step = 1000;    // 1 kHz
      break;
    default:
      step = 1000;
  }
  
  Serial.print("Step changed to: ");
  Serial.print(step);
  Serial.println(" Hz");
}